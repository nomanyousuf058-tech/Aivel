'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { 
  Plus, 
  Search, 
  Filter,
  FileText,
  Newspaper,
  BookOpen,
  Sparkles,
  Download,
  Edit3
} from 'lucide-react'
import { ContentItem } from '@/types'
import ContentCard from '@/components/ui/ContentCard'
import DashboardLayout from '@/components/layouts/DashboardLayout'

type ContentType = 'all' | 'blog' | 'news' | 'article'

export default function ContentStudio() {
  const [content, setContent] = useState<ContentItem[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedType, setSelectedType] = useState<ContentType>('all')
  const [generating, setGenerating] = useState(false)

  useEffect(() => {
    const fetchContent = async () => {
      try {
        setLoading(true)
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000))
        const mockData = (await import('@/mocks/content.json'))
        const mockContent = mockData.content as ContentItem[]
        setContent(mockContent)
      } catch (error) {
        console.error('Failed to fetch content:', error)
        // Fallback to mock data
        const mockData = (await import('@/mocks/content.json'))
        const mockContent = mockData.content as ContentItem[]
        setContent(mockContent)
      } finally {
        setLoading(false)
      }
    }

    fetchContent()
  }, [])

  const filteredContent = content.filter(item => {
    const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.summary.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesType = selectedType === 'all' || item.type === selectedType
    return matchesSearch && matchesType
  })

  const handleGenerateContent = async () => {
    setGenerating(true)
    try {
      // Simulate API call to generate content
      await new Promise(resolve => setTimeout(resolve, 3000))
      // In real app: await contentApi.generate({ prompt: 'tech trends', type: 'blog' })
      
      // Add generated content to list
      const newContent: ContentItem = {
        id: Date.now().toString(),
        title: 'AI-Generated: The Future of Technology in 2024',
        summary: 'An in-depth analysis of emerging technologies and their impact on various industries, generated by AI based on current trends and data.',
        type: 'blog',
        status: 'draft',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        views: 0,
        engagement: 0,
        affiliateLinks: [
          { title: 'Tech Trends Report', url: 'https://example.com/tech-trends' }
        ]
      }
      setContent(prev => [newContent, ...prev])
      alert('Content generated successfully!')
    } catch (error) {
      console.error('Failed to generate content:', error)
      alert('Content generation failed. Please try again.')
    } finally {
      setGenerating(false)
    }
  }

  const typeConfig = {
    all: { label: 'All Content', icon: FileText, color: 'bg-gray-500' },
    blog: { label: 'Blog Posts', icon: Edit3, color: 'bg-blue-500' },
    news: { label: 'News', icon: Newspaper, color: 'bg-green-500' },
    article: { label: 'Articles', icon: BookOpen, color: 'bg-purple-500' }
  }

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"
        >
          <div>
            <h1 className="text-3xl font-bold text-white">Content Studio</h1>
            <p className="text-gray-300 mt-2">
              Create, manage, and optimize your content with AI assistance
            </p>
          </div>
          <button
            onClick={handleGenerateContent}
            disabled={generating}
            className="bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-300 neon-glow flex items-center space-x-2"
          >
            <Sparkles className={`h-5 w-5 ${generating ? 'animate-spin' : ''}`} />
            <span>{generating ? 'Generating...' : 'AI Generate'}</span>
          </button>
        </motion.div>

        {/* Content Type Filters */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="flex flex-wrap gap-3"
        >
          {(Object.entries(typeConfig) as [ContentType, any][]).map(([type, config]) => {
            const Icon = config.icon
            return (
              <button
                key={type}
                onClick={() => setSelectedType(type)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-lg transition-all duration-200 ${
                  selectedType === type
                    ? 'bg-blue-600 text-white'
                    : 'glass text-gray-300 hover:text-white hover:bg-white/10'
                }`}
              >
                <Icon className="h-4 w-4" />
                <span>{config.label}</span>
              </button>
            )
          })}
        </motion.div>

        {/* Search and Actions */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
          className="flex flex-col sm:flex-row gap-4"
        >
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
            <input
              type="text"
              placeholder="Search content..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full glass pl-10 pr-4 py-3 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <button className="glass hover:bg-white/10 text-white px-6 py-3 rounded-xl transition-all duration-300 flex items-center space-x-2">
            <Filter className="h-5 w-5" />
            <span>Filter</span>
          </button>
          <button className="glass hover:bg-white/10 text-white px-6 py-3 rounded-xl transition-all duration-300 flex items-center space-x-2">
            <Download className="h-5 w-5" />
            <span>Export</span>
          </button>
        </motion.div>

        {/* Content Grid */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3 }}
          className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6"
        >
          {loading ? (
            // Loading skeletons
            Array.from({ length: 6 }).map((_, index) => (
              <div
                key={index}
                className="glass-card animate-pulse space-y-4"
              >
                <div className="h-4 bg-gray-700 rounded w-3/4"></div>
                <div className="h-3 bg-gray-700 rounded"></div>
                <div className="h-3 bg-gray-700 rounded w-2/3"></div>
              </div>
            ))
          ) : filteredContent.length > 0 ? (
            filteredContent.map((item, index) => (
              <ContentCard
                key={item.id}
                content={item}
                delay={index * 0.1}
              />
            ))
          ) : (
            <div className="col-span-full text-center py-12">
              <div className="text-gray-400 text-lg mb-4">
                No content found matching your criteria.
              </div>
              <button
                onClick={handleGenerateContent}
                className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-xl transition-colors"
              >
                Generate New Content
              </button>
            </div>
          )}
        </motion.div>
      </div>
    </DashboardLayout>
  )
}